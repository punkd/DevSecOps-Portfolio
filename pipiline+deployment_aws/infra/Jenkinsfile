pipeline {
  agent any
  environment {
    AWS_DEFAULT_REGION = 'us-east-1'
  }
  options { timestamps() }

  stages {
    stage('ðŸ”Ž Diagnostics') {
      steps {
        sh '''
          echo "=== Versions ==="
          terraform -version || true
          aws --version || true
        '''
        withCredentials([usernamePassword(
          credentialsId: '3f776ff3-06c6-49bf-b7c8-2277e9d5b1f6',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        )]) {
          sh 'aws sts get-caller-identity'
        }
      }
    }

    stage('ðŸ§° Terraform Init/Plan (with import)') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: '3f776ff3-06c6-49bf-b7c8-2277e9d5b1f6',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        )]) {
          dir('pipiline+deployment_aws/infra') {
            sh '''
              set -e
              echo "[INFO] Initializing Terraform..."
              terraform init -input=false

              # Import ECR repo if not already managed
              if ! terraform state show aws_ecr_repository.repo >/dev/null 2>&1; then
                echo "[INFO] Importing existing ECR repo into Terraform state..."
                terraform import aws_ecr_repository.repo flask-secure-app
              fi

              terraform fmt -check || true
              terraform validate
              terraform plan -out=tfplan -input=false
            '''
          }
        }
      }
    }

    stage('ðŸš€ Terraform Apply') {
      steps {
        input message: 'Apply infrastructure changes?'
        withCredentials([usernamePassword(
          credentialsId: '3f776ff3-06c6-49bf-b7c8-2277e9d5b1f6',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        )]) {
          dir('pipiline+deployment_aws/infra') {
            sh 'terraform apply -input=false -auto-approve tfplan'
          }
        }
      }
    }

    stage('ðŸ©º Smoke Test (ECS task public IP)') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: '3f776ff3-06c6-49bf-b7c8-2277e9d5b1f6',
          usernameVariable: 'AWS_ACCESS_KEY_ID',
          passwordVariable: 'AWS_SECRET_ACCESS_KEY'
        )]) {
          dir('pipiline+deployment_aws/infra') {
            sh '''
              set -e
              CLUSTER=$(terraform output -raw cluster_name)
              SERVICE=$(terraform output -raw service_name)
              # wait for task to start
              for i in 1 2 3 4 5; do
                TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER" --service-name "$SERVICE" --query 'taskArns[0]' --output text)
                [ "$TASK_ARN" != "None" ] && [ -n "$TASK_ARN" ] && break || sleep 10
              done
              ENI=$(aws ecs describe-tasks --cluster "$CLUSTER" --tasks "$TASK_ARN" \
                   --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
              IP=$(aws ec2 describe-network-interface
